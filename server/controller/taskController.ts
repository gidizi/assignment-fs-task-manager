import { Request, Response } from 'express'
import { ZodError } from 'zod';
import mongoose from 'mongoose';
import { Task as taskModel, ITask, Task } from '../models/taskModel'
import { taskPayload, taskPayloadWithPotentialInstanceAttrs } from "./types/types"

//todo for prod: define the DTOs that are expected to be received from the UI and a converter
//todo: define response types to provide consistent response structre
//todo: extract hard coded messages to separate file
//todo: res status doesn't appears at res, fix it
//todo: add middlware to remove the __v attr generated by mongoose from user response

export const getAllTasks = async (req: Request, res: Response) => {
    try {
        const tasks = await taskModel.find()
        const reversedTasks = tasks.reverse();
        res.status(200).json({ success: true, data: reversedTasks })
    } catch (err) {
        res.status(500).json({ success: false, error: 'Failed to fetch tasks' })
    }
}

export const getTaskById = async (req: Request, res: Response) => {
    try {
        const task = await taskModel.findById(req.params.id)
        if (!task) {
            res.status(404).json({ success: false, error: 'Specific task could not be found' })
            return
        }
        res.status(200).json(task)
    } catch (err) {
        res.status(500).json({ success: false, error: 'Failed to fetch task' })
    }
}


export const createTask = async (req: Request, res: Response) => {
    try {
        const requestData = req.body as taskPayload
        const newRecord = await taskModel.create(requestData)
        res.status(201).json({ success: true, data: newRecord });
    } catch (err) {
        if (err instanceof ZodError || err instanceof mongoose.Error.ValidationError) {
            res.status(400).json({ success: false, message: err });
        } else {
            res.status(500).json({ success: false, message: 'Internal server Error' })
        }
    }
}

export const updateTask = async (req: Request, res: Response) => {
    try {
        const { id, _id, creationTime, ...relevantFields } = req.body as taskPayloadWithPotentialInstanceAttrs
        const updatedTask = await taskModel.findByIdAndUpdate(req.params.id, relevantFields, { new: true, runValidators: true });
        if (!updatedTask) {
            res.status(404).json({ success: false, message: 'Task not found' })
            return
        }
        res.status(200).json({ success: true, data: updatedTask })
    } catch (err) {
        res.status(500).json({ success: false, error: 'Failed to update task' });
    }
}

export const deleteTask = async (req: Request, res: Response) => {
    try {
        const deletedTask = await Task.findByIdAndDelete(req.params.id)
        if (!deletedTask) {
            res.status(404).json({ success: false, message: 'Task not found' })
            return
        }
        res.status(200).json({ success: true, data: deletedTask })
    } catch (err) {
        res.status(500).json({ success: false, error: 'Failed to delete task' });
    }
}